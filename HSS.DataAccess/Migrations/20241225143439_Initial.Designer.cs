// <auto-generated />
using System;
using System.Collections.Generic;
using HSS.DataAccess.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HSS.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241225143439_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HSS.Domain.BaseModels.IdentityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationOfRefreshToken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("IdentityUsers");

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HSS.Domain.Models.Administration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Administrations");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Appointments");

                    b.HasDiscriminator().HasValue("Appointment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HSS.Domain.Models.Clinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentDurationInMinutes")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("FinishAt")
                        .HasColumnType("time");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MedicalDepartment")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("HSS.Domain.Models.ClinicSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ClinicSpecializations");
                });

            modelBuilder.Entity("HSS.Domain.Models.Disease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AffectedPopulation")
                        .HasColumnType("int");

                    b.Property<string>("CommonAgeGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommonGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Contagious")
                        .HasColumnType("bit");

                    b.Property<float>("CureRate")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Discovery_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiseaseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FatalityRate")
                        .HasColumnType("real");

                    b.Property<string>("GeographicSpread")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("HasVaccine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastOutbreakDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("PreventionMeasures")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ResearchStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RiskFactors")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentDurationInDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("HSS.Domain.Models.EffectiveSubstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternativeNames")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChemicalFormula")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DiscoveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int?>("EffectiveSubstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryUsage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("StabilityConditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("EffectiveSubstanceId");

                    b.ToTable("EffectiveSubstances");
                });

            modelBuilder.Entity("HSS.Domain.Models.EmergencyDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AmbulanceAvailability")
                        .HasColumnType("bit");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("EmergencyDepartments");
                });

            modelBuilder.Entity("HSS.Domain.Models.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BedAvailability")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentsCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<DateTime>("EstablishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalAdminId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfDoctors")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfNurses")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<string>("TaxIdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HospitalAdminId")
                        .IsUnique();

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HSS.Domain.Models.LabCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentDuration")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LabCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("LabCenterId");

                    b.ToTable("LabCenters");
                });

            modelBuilder.Entity("HSS.Domain.Models.LabCenterTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LabCenterTests");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.ClinicSpecializationHospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<int>("ClinicSpecializationId")
                        .HasColumnType("int");

                    b.HasKey("HospitalId", "ClinicSpecializationId");

                    b.HasIndex("ClinicSpecializationId");

                    b.ToTable("clinicSpecializationHospitals");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.EffectiveSubstanceDisease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("EffectiveSubstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("DiseaseId", "EffectiveSubstanceId");

                    b.HasIndex("EffectiveSubstanceId");

                    b.ToTable("EffectiveSubstanceDisease");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.EffectiveSubstanceMedicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("EffectiveSubstanceId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MedicineId", "EffectiveSubstanceId");

                    b.HasIndex("EffectiveSubstanceId");

                    b.ToTable("EffectiveSubstanceMedicine");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.LabCenterLabTest", b =>
                {
                    b.Property<int>("LabCenterTestId")
                        .HasColumnType("int");

                    b.Property<int>("LabCenterId")
                        .HasColumnType("int");

                    b.HasKey("LabCenterTestId", "LabCenterId");

                    b.HasIndex("LabCenterId");

                    b.ToTable("LabCenterLabTests");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.SideEffectEffectiveSubstance", b =>
                {
                    b.Property<int>("SideEffectId")
                        .HasColumnType("int");

                    b.Property<int>("EffectiveSubstanceId")
                        .HasColumnType("int");

                    b.HasKey("SideEffectId", "EffectiveSubstanceId");

                    b.HasIndex("EffectiveSubstanceId");

                    b.ToTable("SideEffectEffectiveSubstances");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.SideEffectMedicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int>("SideEffectId")
                        .HasColumnType("int");

                    b.HasKey("MedicineId", "SideEffectId");

                    b.HasIndex("SideEffectId");

                    b.ToTable("SideEffectMedicines");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.SymptomDisease", b =>
                {
                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.HasKey("SymptomId", "DiseaseId");

                    b.HasIndex("DiseaseId");

                    b.ToTable("SymptomDiseases");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("HSS.Domain.Models.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpectedTimeForTreatment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("HSS.Domain.Models.Medicine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EffectiveSubstanceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("PrescriptionRequired")
                        .HasColumnType("bit");

                    b.Property<string>("StorageConditions")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("HSS.Domain.Models.PatientMediacalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnyHealthcare")
                        .HasColumnType("int");

                    b.Property<float>("Bmi")
                        .HasColumnType("real");

                    b.Property<int>("CholCheck")
                        .HasColumnType("int");

                    b.Property<int>("DiabetesBinary")
                        .HasColumnType("int");

                    b.Property<int>("DiffWalk")
                        .HasColumnType("int");

                    b.Property<int>("Fruits")
                        .HasColumnType("int");

                    b.Property<int>("GenHlth")
                        .HasColumnType("int");

                    b.Property<int>("HeartDiseaseOrAttack")
                        .HasColumnType("int");

                    b.Property<int>("HighBp")
                        .HasColumnType("int");

                    b.Property<int>("HighChol")
                        .HasColumnType("int");

                    b.Property<int>("HvyAlcoholConsump")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MentHlth")
                        .HasColumnType("int");

                    b.Property<int>("NoDocbcCost")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PhysActivity")
                        .HasColumnType("int");

                    b.Property<int>("PhysHlth")
                        .HasColumnType("int");

                    b.Property<int>("Smoker")
                        .HasColumnType("int");

                    b.Property<int>("Stroke")
                        .HasColumnType("int");

                    b.Property<int>("Veggies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PatientMediacalDetails");
                });

            modelBuilder.Entity("HSS.Domain.Models.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Pharmacies");
                });

            modelBuilder.Entity("HSS.Domain.Models.PrescriptionRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicAppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("DispenseStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DispensedAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DispensedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DosageFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicineUnitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<int>("TimesOfDispensed")
                        .HasColumnType("int");

                    b.Property<string>("TimingDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClinicAppointmentId");

                    b.HasIndex("MedicineId");

                    b.ToTable("PrescriptionRecords");
                });

            modelBuilder.Entity("HSS.Domain.Models.RadiologyCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AppointmentDuration")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("RadiologyCenters");
                });

            modelBuilder.Entity("HSS.Domain.Models.RadiologyTestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("radiologyTestTypes");
                });

            modelBuilder.Entity("HSS.Domain.Models.Reception", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("EndAt")
                        .HasColumnType("time");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("HSS.Domain.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HSS.Domain.Models.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AgeRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commonality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Reversibility")
                        .HasColumnType("bit");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SideEffects");
                });

            modelBuilder.Entity("HSS.Domain.Models.Symptom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OnsetPattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TreatmentRequired")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("HSS.Domain.Models.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.AdministrationAdmin", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<int>("AdministrationId")
                        .HasColumnType("int");

                    b.HasIndex("AdministrationId")
                        .IsUnique()
                        .HasFilter("[AdministrationId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("AdministrationAdmin");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Doctor", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("StartAt")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("time");

                    b.HasIndex("ClinicId");

                    b.HasIndex("HospitalId");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.HospitalAdmin", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<int?>("HospitalId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.ToTable("IdentityUsers", t =>
                        {
                            t.Property("HospitalId")
                                .HasColumnName("HospitalAdmin_HospitalId");
                        });

                    b.HasDiscriminator().HasValue("HospitalAdmin");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.LabManager", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<string>("Certifications")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LabCenterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("time");

                    b.HasIndex("LabCenterId");

                    b.ToTable("IdentityUsers", t =>
                        {
                            t.Property("ExperienceYears")
                                .HasColumnName("LabManager_ExperienceYears");

                            t.Property("HireDate")
                                .HasColumnName("LabManager_HireDate");

                            t.Property("WorkingTime")
                                .HasColumnName("LabManager_WorkingTime");
                        });

                    b.HasDiscriminator().HasValue("LabManager");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Patient", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<string>("AgeCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomeCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientMediacalDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "HSS.Domain.IdentityModels.Patient.Address#PatientAddress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<int>("HouseName")
                                .HasColumnType("int");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");
                        });

                    b.HasIndex("PatientMediacalDetailsId")
                        .IsUnique()
                        .HasFilter("[PatientMediacalDetailsId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Pharmacist", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("time");

                    b.HasIndex("PharmacyId");

                    b.ToTable("IdentityUsers", t =>
                        {
                            t.Property("WorkingTime")
                                .HasColumnName("Pharmacist_WorkingTime");
                        });

                    b.HasDiscriminator().HasValue("Pharmacist");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.RadiologyManager", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RadiologyCenterId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("time");

                    b.HasIndex("RadiologyCenterId");

                    b.ToTable("IdentityUsers", t =>
                        {
                            t.Property("ExperienceYears")
                                .HasColumnName("RadiologyManager_ExperienceYears");

                            t.Property("HireDate")
                                .HasColumnName("RadiologyManager_HireDate");

                            t.Property("WorkingTime")
                                .HasColumnName("RadiologyManager_WorkingTime");
                        });

                    b.HasDiscriminator().HasValue("RadiologyManager");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Receptionist", b =>
                {
                    b.HasBaseType("HSS.Domain.BaseModels.IdentityUser");

                    b.Property<int>("ReceptionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("WorkingTime")
                        .HasColumnType("time");

                    b.HasIndex("ReceptionId");

                    b.ToTable("IdentityUsers", t =>
                        {
                            t.Property("WorkingTime")
                                .HasColumnName("Receptionist_WorkingTime");
                        });

                    b.HasDiscriminator().HasValue("Receptionist");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.ClinicAppointment", b =>
                {
                    b.HasBaseType("HSS.Domain.Models.Aggregates.Appointment");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicAppointmentIdRelatedTo")
                        .HasColumnType("int");

                    b.Property<int>("ClinicId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("FollowUpExpectedPeriod")
                        .HasColumnType("time");

                    b.Property<bool>("FollowUpNeeded")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnd")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("LabAppointmentNeeded")
                        .HasColumnType("bit");

                    b.Property<int>("LabAppointmentsNumberDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool>("RadiologyAppointmentNeeded")
                        .HasColumnType("bit");

                    b.Property<int>("RadiologyAppointmentsNumberDone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ReasonForVisit")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasIndex("ClinicAppointmentIdRelatedTo")
                        .IsUnique()
                        .HasFilter("[ClinicAppointmentIdRelatedTo] IS NOT NULL");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasDiscriminator().HasValue("ClinicAppointment");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.LabAppointment", b =>
                {
                    b.HasBaseType("HSS.Domain.Models.Aggregates.Appointment");

                    b.Property<int>("ClinicAppointmentIdRelatedTo")
                        .HasColumnType("int");

                    b.Property<int>("LabCenterId")
                        .HasColumnType("int");

                    b.Property<int>("LabTesterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestResult")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.HasIndex("ClinicAppointmentIdRelatedTo");

                    b.HasIndex("LabCenterId");

                    b.HasIndex("LabTesterId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Appointments", t =>
                        {
                            t.Property("ClinicAppointmentIdRelatedTo")
                                .HasColumnName("LabAppointment_ClinicAppointmentIdRelatedTo");
                        });

                    b.HasDiscriminator().HasValue("LabAppointment");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.RadiologyAppointment", b =>
                {
                    b.HasBaseType("HSS.Domain.Models.Aggregates.Appointment");

                    b.Property<int>("ClinicAppointmentIdRelatedTo")
                        .HasColumnType("int");

                    b.Property<int>("RadiologyCenterId")
                        .HasColumnType("int");

                    b.Property<int>("RadiologyTesterId")
                        .HasColumnType("int");

                    b.Property<string>("TestResult")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.HasIndex("ClinicAppointmentIdRelatedTo");

                    b.HasIndex("RadiologyCenterId");

                    b.HasIndex("RadiologyTesterId");

                    b.HasIndex("TestTypeId");

                    b.ToTable("Appointments", t =>
                        {
                            t.Property("ClinicAppointmentIdRelatedTo")
                                .HasColumnName("RadiologyAppointment_ClinicAppointmentIdRelatedTo");

                            t.Property("TestResult")
                                .HasColumnName("RadiologyAppointment_TestResult");

                            t.Property("TestTypeId")
                                .HasColumnName("RadiologyAppointment_TestTypeId");
                        });

                    b.HasDiscriminator().HasValue("RadiologyAppointment");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.Appointment", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.Clinic", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.ClinicSpecialization", "Specialization")
                        .WithMany("Clinics")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HSS.Domain.Models.EffectiveSubstance", b =>
                {
                    b.HasOne("HSS.Domain.Models.Disease", null)
                        .WithMany("EffectiveSubstances")
                        .HasForeignKey("DiseaseId");

                    b.HasOne("HSS.Domain.Models.EffectiveSubstance", null)
                        .WithMany("EffectiveSubstances")
                        .HasForeignKey("EffectiveSubstanceId");
                });

            modelBuilder.Entity("HSS.Domain.Models.EmergencyDepartment", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.Hospital", b =>
                {
                    b.HasOne("HSS.Domain.IdentityModels.HospitalAdmin", "HospitalAdmin")
                        .WithOne("Hospital")
                        .HasForeignKey("HSS.Domain.Models.Hospital", "HospitalAdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HospitalAdmin");
                });

            modelBuilder.Entity("HSS.Domain.Models.LabCenter", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.LabCenter", null)
                        .WithMany("TestsAvailable")
                        .HasForeignKey("LabCenterId");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.ClinicSpecializationHospital", b =>
                {
                    b.HasOne("HSS.Domain.Models.ClinicSpecialization", "ClinicSpecialization")
                        .WithMany()
                        .HasForeignKey("ClinicSpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClinicSpecialization");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.EffectiveSubstanceDisease", b =>
                {
                    b.HasOne("HSS.Domain.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.EffectiveSubstance", "EffectiveSubstance")
                        .WithMany()
                        .HasForeignKey("EffectiveSubstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("EffectiveSubstance");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.EffectiveSubstanceMedicine", b =>
                {
                    b.HasOne("HSS.Domain.Models.EffectiveSubstance", "EffectiveSubstance")
                        .WithMany()
                        .HasForeignKey("EffectiveSubstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EffectiveSubstance");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.LabCenterLabTest", b =>
                {
                    b.HasOne("HSS.Domain.Models.LabCenter", "LabCenter")
                        .WithMany()
                        .HasForeignKey("LabCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.LabCenterTest", "LabCenterTest")
                        .WithMany()
                        .HasForeignKey("LabCenterTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabCenter");

                    b.Navigation("LabCenterTest");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.SideEffectEffectiveSubstance", b =>
                {
                    b.HasOne("HSS.Domain.Models.EffectiveSubstance", "EffectiveSubstance")
                        .WithMany()
                        .HasForeignKey("EffectiveSubstanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.SideEffect", "SideEffect")
                        .WithMany()
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EffectiveSubstance");

                    b.Navigation("SideEffect");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.SideEffectMedicine", b =>
                {
                    b.HasOne("HSS.Domain.Models.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.SideEffect", "SideEffect")
                        .WithMany()
                        .HasForeignKey("SideEffectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Medicine");

                    b.Navigation("SideEffect");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.SymptomDisease", b =>
                {
                    b.HasOne("HSS.Domain.Models.Disease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.Symptom", "Symptom")
                        .WithMany()
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disease");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("HSS.Domain.Models.ManyToManyRelationEntitys.UserRole", b =>
                {
                    b.HasOne("HSS.Domain.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HSS.Domain.BaseModels.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HSS.Domain.Models.MedicalHistory", b =>
                {
                    b.HasOne("HSS.Domain.IdentityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HSS.Domain.Models.Pharmacy", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.PrescriptionRecord", b =>
                {
                    b.HasOne("HSS.Domain.Models.Aggregates.ClinicAppointment", "ClinicAppointment")
                        .WithMany("PrescriptionRecords")
                        .HasForeignKey("ClinicAppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.Medicine", "Medicine")
                        .WithMany("PrescriptionRecords")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClinicAppointment");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HSS.Domain.Models.RadiologyCenter", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.Reception", b =>
                {
                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.Models.UserLog", b =>
                {
                    b.HasOne("HSS.Domain.BaseModels.IdentityUser", "User")
                        .WithMany("UserLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.AdministrationAdmin", b =>
                {
                    b.HasOne("HSS.Domain.Models.Administration", "Administration")
                        .WithOne("Admin")
                        .HasForeignKey("HSS.Domain.IdentityModels.AdministrationAdmin", "AdministrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Administration");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Doctor", b =>
                {
                    b.HasOne("HSS.Domain.Models.Clinic", "Clinic")
                        .WithMany("Doctors")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.LabManager", b =>
                {
                    b.HasOne("HSS.Domain.Models.LabCenter", "LabCenter")
                        .WithMany("labManagers")
                        .HasForeignKey("LabCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabCenter");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Patient", b =>
                {
                    b.HasOne("HSS.Domain.Models.PatientMediacalDetails", "PatientMediacalDetails")
                        .WithOne("Patient")
                        .HasForeignKey("HSS.Domain.IdentityModels.Patient", "PatientMediacalDetailsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PatientMediacalDetails");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Pharmacist", b =>
                {
                    b.HasOne("HSS.Domain.Models.Pharmacy", "Pharmacy")
                        .WithMany("Pharmacists")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.RadiologyManager", b =>
                {
                    b.HasOne("HSS.Domain.Models.RadiologyCenter", "RadiologyCenter")
                        .WithMany("RadiologyManagers")
                        .HasForeignKey("RadiologyCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RadiologyCenter");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.Receptionist", b =>
                {
                    b.HasOne("HSS.Domain.Models.Reception", "Reception")
                        .WithMany("Receptionists")
                        .HasForeignKey("ReceptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.ClinicAppointment", b =>
                {
                    b.HasOne("HSS.Domain.Models.Aggregates.ClinicAppointment", "ClinicAppointmentRelatedTo")
                        .WithOne()
                        .HasForeignKey("HSS.Domain.Models.Aggregates.ClinicAppointment", "ClinicAppointmentIdRelatedTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HSS.Domain.Models.Clinic", "Clinic")
                        .WithMany()
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.IdentityModels.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.IdentityModels.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clinic");

                    b.Navigation("ClinicAppointmentRelatedTo");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.LabAppointment", b =>
                {
                    b.HasOne("HSS.Domain.Models.Aggregates.ClinicAppointment", "ClinicAppointmentRelatedTo")
                        .WithMany("LabAppointments")
                        .HasForeignKey("ClinicAppointmentIdRelatedTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HSS.Domain.Models.LabCenter", "LabCenter")
                        .WithMany()
                        .HasForeignKey("LabCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.IdentityModels.LabManager", "LabManager")
                        .WithMany()
                        .HasForeignKey("LabTesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.LabCenterTest", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClinicAppointmentRelatedTo");

                    b.Navigation("LabCenter");

                    b.Navigation("LabManager");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.RadiologyAppointment", b =>
                {
                    b.HasOne("HSS.Domain.Models.Aggregates.ClinicAppointment", "ClinicAppointmentRelatedTo")
                        .WithMany("RadiologyAppointments")
                        .HasForeignKey("ClinicAppointmentIdRelatedTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HSS.Domain.Models.RadiologyCenter", "RadiologyCenter")
                        .WithMany()
                        .HasForeignKey("RadiologyCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.IdentityModels.RadiologyManager", "RadiologyManager")
                        .WithMany()
                        .HasForeignKey("RadiologyTesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HSS.Domain.Models.RadiologyTestType", "TestType")
                        .WithMany()
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClinicAppointmentRelatedTo");

                    b.Navigation("RadiologyCenter");

                    b.Navigation("RadiologyManager");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("HSS.Domain.BaseModels.IdentityUser", b =>
                {
                    b.Navigation("UserLogs");
                });

            modelBuilder.Entity("HSS.Domain.Models.Administration", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();
                });

            modelBuilder.Entity("HSS.Domain.Models.Clinic", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HSS.Domain.Models.ClinicSpecialization", b =>
                {
                    b.Navigation("Clinics");
                });

            modelBuilder.Entity("HSS.Domain.Models.Disease", b =>
                {
                    b.Navigation("EffectiveSubstances");
                });

            modelBuilder.Entity("HSS.Domain.Models.EffectiveSubstance", b =>
                {
                    b.Navigation("EffectiveSubstances");
                });

            modelBuilder.Entity("HSS.Domain.Models.Hospital", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HSS.Domain.Models.LabCenter", b =>
                {
                    b.Navigation("TestsAvailable");

                    b.Navigation("labManagers");
                });

            modelBuilder.Entity("HSS.Domain.Models.Medicine", b =>
                {
                    b.Navigation("PrescriptionRecords");
                });

            modelBuilder.Entity("HSS.Domain.Models.PatientMediacalDetails", b =>
                {
                    b.Navigation("Patient")
                        .IsRequired();
                });

            modelBuilder.Entity("HSS.Domain.Models.Pharmacy", b =>
                {
                    b.Navigation("Pharmacists");
                });

            modelBuilder.Entity("HSS.Domain.Models.RadiologyCenter", b =>
                {
                    b.Navigation("RadiologyManagers");
                });

            modelBuilder.Entity("HSS.Domain.Models.Reception", b =>
                {
                    b.Navigation("Receptionists");
                });

            modelBuilder.Entity("HSS.Domain.IdentityModels.HospitalAdmin", b =>
                {
                    b.Navigation("Hospital")
                        .IsRequired();
                });

            modelBuilder.Entity("HSS.Domain.Models.Aggregates.ClinicAppointment", b =>
                {
                    b.Navigation("LabAppointments");

                    b.Navigation("PrescriptionRecords");

                    b.Navigation("RadiologyAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
